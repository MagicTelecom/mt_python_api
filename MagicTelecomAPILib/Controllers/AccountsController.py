# -*- coding: utf-8 -*-

"""
   MagicTelecomAPILib.Controllers.AccountsController

   This file was automatically generated by APIMATIC BETA v2.0 on 06/22/2016
"""
from MagicTelecomAPILib.APIHelper import APIHelper
from MagicTelecomAPILib.APIException import APIException
from MagicTelecomAPILib.Configuration import Configuration
from MagicTelecomAPILib.Http.HttpRequest import HttpRequest
from MagicTelecomAPILib.Http.HttpResponse import HttpResponse
from MagicTelecomAPILib.Http.RequestsClient import RequestsClient
from MagicTelecomAPILib.Controllers.BaseController import BaseController



class AccountsController(BaseController):

    """A Controller to access Endpoints in the MagicTelecomAPILib API."""

    def __init__(self, http_client = None):
        """Constructor which allows a different HTTP client for this controller."""
        BaseController.__init__(self, http_client)

    def create_caller_locations(self,
                                account_number,
                                caller_location_form):
        """Does a POST request to /accounts/{account_number}/caller_locations.

        Create a new caller location

        Args:
            account_number (string): Number of the account
            caller_location_form (CallerLocationForm): Caller Location Data

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/caller_locations"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "content-type": "application/json; charset=utf-8",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.post(query_url, headers=headers, parameters=APIHelper.json_serialize(caller_location_form))

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def get_caller_location_by_id(self,
                                  account_number,
                                  caller_location_id):
        """Does a GET request to /accounts/{account_number}/caller_locations/{caller_location_id}.

        Get a caller location by Id

        Args:
            account_number (string): Account Number
            caller_location_id (int): a caller location id

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/caller_locations/{caller_location_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "caller_location_id": caller_location_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def delete_caller_locations(self,
                                account_number):
        """Does a DELETE request to /accounts/{account_number}/caller_locations.

        Delete all caller locations

        Args:
            account_number (string): Account Number

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/caller_locations"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def update_caller_location_by_id(self,
                                     account_number,
                                     caller_location_id,
                                     caller_location_form):
        """Does a PUT request to /accounts/{account_number}/caller_locations/{caller_location_id}.

        Update a caller location

        Args:
            account_number (string): Account Number
            caller_location_id (int): Caller Location Id
            caller_location_form (CallerLocationForm): Caller Location Params

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/caller_locations/{caller_location_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "caller_location_id": caller_location_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "content-type": "application/json; charset=utf-8",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.put(query_url, headers=headers, parameters=APIHelper.json_serialize(caller_location_form))

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("	 Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def delete_caller_location_by_id(self,
                                     account_number,
                                     caller_location_id):
        """Does a DELETE request to /accounts/{account_number}/caller_locations/{caller_location_id}.

        Delete a caller location by id

        Args:
            account_number (string): Account Number
            caller_location_id (int): Caller Location Id

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/caller_locations/{caller_location_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "caller_location_id": caller_location_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("	 Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def get_caller_locations(self,
                             account_number,
                             page=None,
                             limit=None):
        """Does a GET request to /accounts/{account_number}/caller_locations.

        Allow clients to get the list of caller locations for the specific
        account.

        Args:
            account_number (string): Number of the account
            page (int, optional): Zero based offset index for the results.
                e.g. 0 would start at the first result and 10 would start at
                the eleventh result
            limit (int, optional): Maximum number of results to return in the
                response.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/caller_locations"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })

        # Process optional query parameters
        query_parameters = {
            "page": page,
            "limit": limit
        }
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers, query_parameters=query_parameters)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def get_accounts(self,
                     page=None,
                     limit=None,
                     filter=None):
        """Does a GET request to /accounts.

        Allow the admin to get the list of all accounts.

        Args:
            page (int, optional): Zero based offset index for the results.
                e.g. 0 would start at the first result and 10 would start at
                the eleventh result.
            limit (int, optional): Maximum number of results to return in the
                response.
            filter (string, optional): Allowed fields: number, email,
                contact_number, firstname, lastname. Use the following
                delimiters to build your filters params. The vertical bar
                ('|') to separate individual filter phrases and a double colon
                ('::') to separate the names and values. The delimiter of the
                double colon (':') separates the property name from the
                comparison value, enabling the comparison value to contain
                spaces. Example:
                www.example.com\\\/users?filter='name::todd|city::denver|title:
                :grand poobah

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts"

        # Process optional query parameters
        query_parameters = {
            "page": page,
            "limit": limit,
            "filter": filter
        }
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers, query_parameters=query_parameters)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def create_account(self,
                       account_form):
        """Does a POST request to /accounts.

        Create a new account.

        Args:
            account_form (AccountForm): TODO: type description here.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts"
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "content-type": "application/json; charset=utf-8",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.post(query_url, headers=headers, parameters=APIHelper.json_serialize(account_form))

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def delete_account(self,
                       account_number):
        """Does a DELETE request to /accounts/{account_number}.

        Delete an account

        Args:
            account_number (string): Account Number

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def get_account(self,
                    account_number):
        """Does a GET request to /accounts/{account_number}.

        Allow clients to get a specific account.

        Args:
            account_number (string): Account Number

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def update_account(self,
                       account_number,
                       account_form):
        """Does a PUT request to /accounts/{account_number}.

         Update an account by a given account_number

        Args:
            account_number (string): Account Number
            account_form (AccountForm): Form parameters

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "content-type": "application/json; charset=utf-8",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.put(query_url, headers=headers, parameters=APIHelper.json_serialize(account_form))

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def delete_cdrs(self,
                    account_number):
        """Does a DELETE request to /accounts/{account_number}/cdrs.

        Deletes all cdrs requests from customer's account.

        Args:
            account_number (string): Account Number

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/cdrs"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def get_cdrs(self,
                 account_number,
                 page=None,
                 limit=None,
                 filter=None):
        """Does a GET request to /accounts/{account_number}/cdrs.

        Allow clients to get the list of cdr request for the specific
        account.

        Args:
            account_number (string): Account Number
            page (int, optional): Zero based offset index for the results.
                e.g. 0 would start at the first result and 10 would start at
                the eleventh result.
            limit (int, optional): Maximum number of results to return in the
                response.
            filter (string, optional): Allowed fields: service_type, from, to
                and created. Use the following delimiters to build your
                filters params. The vertical bar ('|') to separate individual
                filter phrases and a double colon ('::') to separate the names
                and values. The delimiter of the double colon (':') separates
                the property name from the comparison value, enabling the
                comparison value to contain spaces. Example:
                www.example.com\\\/users?filter='name::todd|city::denver|title:
                :grand poobah

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/cdrs"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })

        # Process optional query parameters
        query_parameters = {
            "page": page,
            "limit": limit,
            "filter": filter
        }
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers, query_parameters=query_parameters)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def create_cdrs(self,
                    account_number,
                    cdrs_form):
        """Does a POST request to /accounts/{account_number}/cdrs.

        Creates a cdr request

        Args:
            account_number (string): Account Number
            cdrs_form (CdrForm): cdrs params

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/cdrs"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "content-type": "application/json; charset=utf-8",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.post(query_url, headers=headers, parameters=APIHelper.json_serialize(cdrs_form))

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def get_cdr_by_id(self,
                      account_number,
                      cdr_id):
        """Does a GET request to /accounts/{account_number}/cdrs/{cdr_id}.

        Allow clients to download the cdrs in a file

        Args:
            account_number (string): Account Number
            cdr_id (string): Cdr Id

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/cdrs/{cdr_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "cdr_id": cdr_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("	 Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def delete_cdr_by_id(self,
                         account_number,
                         cdr_id):
        """Does a DELETE request to /accounts/{account_number}/cdrs/{cdr_id}.

        Deletes a cdr file from customer's account.

        Args:
            account_number (string): Account Number
            cdr_id (string): Cdr Id

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/cdrs/{cdr_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "cdr_id": cdr_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def delete_dids(self,
                    account_number):
        """Does a DELETE request to /accounts/{account_number}/dids.

        Deletes all phone_number from customer's account. These numbers must
        be unassigned and returned to Magic stock.

        Args:
            account_number (string): Account Number

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/dids"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def delete_telephone_number(self,
                                account_number,
                                telephone_number):
        """Does a DELETE request to /accounts/{account_number}/dids/{telephone_number}.

        Deletes a phone_number from customer's account. This number must be
        unassigned and returned to Magic stock.

        Args:
            account_number (string): Account Number
            telephone_number (string): Telephone Number

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/dids/{telephone_number}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "telephone_number": telephone_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def get_telephone_number(self,
                             account_number,
                             telephone_number):
        """Does a GET request to /accounts/{account_number}/dids/{telephone_number}.

        Allow clients to get the a specific phone number.

        Args:
            account_number (string): Account Number
            telephone_number (string): Telephone Number

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/dids/{telephone_number}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "telephone_number": telephone_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def update_telephone_number(self,
                                account_number,
                                telephone_number,
                                telephone_number_form):
        """Does a PATCH request to /accounts/{account_number}/dids/{telephone_number}.

        Allow client to perform operations on a specific did

        Args:
            account_number (string): Account Number
            telephone_number (string): Telephone Number
            telephone_number_form (TelephoneNumberForm): Phone params

        Returns:
            void: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/dids/{telephone_number}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "telephone_number": telephone_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "content-type": "application/json; charset=utf-8",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.patch(query_url, headers=headers, parameters=APIHelper.json_serialize(telephone_number_form))

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

    def get_dids(self,
                 account_number,
                 page=None,
                 limit=None,
                 filter=None):
        """Does a GET request to /accounts/{account_number}/dids.

        Allow clients to get the list of numbers for the specific account

        Args:
            account_number (string): Account Number
            page (int, optional): Zero based offset index for the results.
                e.g. 0 would start at the first result and 10 would start at
                the eleventh result.
            limit (int, optional): Maximum number of results to return in the
                response.
            filter (string, optional): Allowed fields: trunk_id, phone_number,
                country_iso2, region_handle, location_handle,
                sip_end_point_uri.\n * Use the following delimiters to build
                your filters params. The vertical bar ('|') to separate
                individual filter phrases and a double colon ('::') to
                separate the names and values. \n * The delimiter of the
                double colon (':') separates the property name from the
                comparison value, enabling the comparison value to contain
                spaces. \n * Example:
                www.example.com\\\/users?filter='name::todd|city::denver|title:
                :grand poobah

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/dids"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })

        # Process optional query parameters
        query_parameters = {
            "page": page,
            "limit": limit,
            "filter": filter
        }
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers, query_parameters=query_parameters)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def delete_trunks(self,
                      account_number):
        """Does a DELETE request to /accounts/{account_number}/trunks.

        Deletes all trunks from customer's account. Numbers on that trunk must
        be unassigned and returned to Magic stock

        Args:
            account_number (string): Account Number

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/trunks"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def get_trunks(self,
                   account_number,
                   page=None,
                   limit=None,
                   filter=None):
        """Does a GET request to /accounts/{account_number}/trunks.

        Allow clients to get the list of trunks for the specific account

        Args:
            account_number (string): Account Number
            page (int, optional): Zero based offset index for the results.
                e.g. 0 would start at the first result and 10 would start at
                the eleventh result.
            limit (int, optional): Maximum number of results to return in the
                response
            filter (string, optional): Allowed fields: trunk_handle. Use the
                following delimiters to build your filters params. The
                vertical bar ('|') to separate individual filter phrases and a
                double colon ('::') to separate the names and values. The
                delimiter of the double colon (':') separates the property
                name from the comparison value, enabling the comparison value
                to contain spaces. Example:
                www.example.com\\\/users?filter='name::todd|city::denver|title:
                :grand poobah

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/trunks"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })

        # Process optional query parameters
        query_parameters = {
            "page": page,
            "limit": limit,
            "filter": filter
        }
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers, query_parameters=query_parameters)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def delete_trunk_by_id(self,
                           account_number,
                           trunk_id):
        """Does a DELETE request to /accounts/{account_number}/trunks/{trunk_id}.

        Deletes a trunk from customer's account. Numbers on that trunk must be
        unassigned and returned to Magic stock.

        Args:
            account_number (string): Accoubt Number
            trunk_id (string): Trunk id

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/trunks/{trunk_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "trunk_id": trunk_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def get_trunk_by_id(self,
                        account_number,
                        trunk_id):
        """Does a GET request to /accounts/{account_number}/trunks/{trunk_id}.

        Allow clients to get the a specific trunk

        Args:
            account_number (string): Account Number
            trunk_id (string): Trunk id

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/trunks/{trunk_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "trunk_id": trunk_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def delete_carts(self,
                     account_number):
        """Does a DELETE request to /accounts/{account_number}/carts.

        Delete all carts from an account

        Args:
            account_number (string): Account Number

        Returns:
            void: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/carts"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

    def get_carts(self,
                  account_number,
                  page=None,
                  limit=None,
                  filter=None,
                  sort=None):
        """Does a GET request to /accounts/{account_number}/carts.

        Allow clients to get the list of carts.

        Args:
            account_number (string): Account number
            page (int, optional): Zero based offset index for the results.
                e.g. 0 would start at the first result and 10 would start at
                the eleventh result.
            limit (int, optional): Maximum number of results to return in the
                response.
            filter (string, optional): Allowed fields: cart_status_handle,
                created. Use the following delimiters to build your filters
                params. The vertical bar ('|') to separate individual filter
                phrases and a double colon ('::') to separate the names and
                values. The delimiter of the double colon (':') separates the
                property name from the comparison value, enabling the
                comparison value to contain spaces. Example:
                www.example.com\\/users?filter='name::todd|city::denver|title::
                grand poobah'
            sort (string, optional): Allowed fields: created. Use sort
                query-string parameter that contains a delimited set of
                property names. For each property name, sort in ascending
                order, and for each property prefixed with a dash ('-') sort
                in descending order. Separate each property name with a
                vertical bar ('|'), which is consistent with the separation of
                the name\\/value pairs in filtering, above. For example, if we
                want to retrieve users in order of their last name
                (ascending), first name (ascending) and hire date
                (descending), the request might look like this
                www.example.com\\/users?sort='last_name|first_name|-hire_date'
                
        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/carts"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })

        # Process optional query parameters
        query_parameters = {
            "page": page,
            "limit": limit,
            "filter": filter,
            "sort": sort
        }
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers, query_parameters=query_parameters)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def create_carts(self,
                     account_number):
        """Does a POST request to /accounts/{account_number}/carts.

        Create an cart

        Args:
            account_number (string): Account number

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/carts"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.post(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 403:
            raise APIException("User not authorized to perform the operation", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def delete_cart(self,
                    account_number,
                    cart_id):
        """Does a DELETE request to /accounts/{account_number}/carts/{cart_id}.

        Delete a cart

        Args:
            account_number (string): Account number
            cart_id (string): Cart Id

        Returns:
            void: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/carts/{cart_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "cart_id": cart_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

    def get_cart(self,
                 account_number,
                 cart_id):
        """Does a GET request to /accounts/{account_number}/carts/{cart_id}.

        Allow clients to get a specific cart.

        Args:
            account_number (string): Account number
            cart_id (string): Cart id

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/carts/{cart_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "cart_id": cart_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def create_cart_checkout(self,
                             account_number,
                             cart_id,
                             cart_checkout_form):
        """Does a POST request to /accounts/{account_number}/carts/{cart_id}/checkout.

        Checkout a cart and create an order

        Args:
            account_number (string): Account Number
            cart_id (string): Cart Id
            cart_checkout_form (CartCheckoutForm): TODO: type description
                here.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/carts/{cart_id}/checkout"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "cart_id": cart_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "content-type": "application/json; charset=utf-8",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.post(query_url, headers=headers, parameters=APIHelper.json_serialize(cart_checkout_form))

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 403:
            raise APIException("User not authorized to perform the operation", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def delete_items(self,
                     account_number,
                     cart_id):
        """Does a DELETE request to /accounts/{account_number}/carts/{cart_id}/items.

        Delete all carts items

        Args:
            account_number (string): Account Number
            cart_id (int): Cart Id

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/carts/{cart_id}/items"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "cart_id": cart_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def get_items(self,
                  account_number,
                  cart_id,
                  page=None,
                  limit=None):
        """Does a GET request to /accounts/{account_number}/carts/{cart_id}/items.

        Allow clients to get the list of cart items.

        Args:
            account_number (string): Account Number
            cart_id (int): Cart Id
            page (int, optional): Zero based offset index for the results.
                e.g. 0 would start at the first result and 10 would start at
                the eleventh result.
            limit (int, optional): Maximum number of results to return in the
                response.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/carts/{cart_id}/items"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "cart_id": cart_id
        })

        # Process optional query parameters
        query_parameters = {
            "page": page,
            "limit": limit
        }
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers, query_parameters=query_parameters)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def create_items(self,
                     account_number,
                     cart_id,
                     item_form):
        """Does a POST request to /accounts/{account_number}/carts/{cart_id}/items.

        TODO: type endpoint description here.

        Args:
            account_number (string): Account Number
            cart_id (int): Cart Id
            item_form (ItemForm): TODO: type description here.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/carts/{cart_id}/items"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "cart_id": cart_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "content-type": "application/json; charset=utf-8",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.post(query_url, headers=headers, parameters=APIHelper.json_serialize(item_form))

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 403:
            raise APIException("User not authorized to perform the operation", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def delete_item(self,
                    account_number,
                    cart_id,
                    item_id):
        """Does a DELETE request to /accounts/{account_number}/carts/{cart_id}/items/{item_id}.

        Delete a cart item

        Args:
            account_number (string): Account Number
            cart_id (int): Cart Id
            item_id (int): Item Id

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/carts/{cart_id}/items/{item_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "cart_id": cart_id,
            "item_id": item_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def get_item(self,
                 account_number,
                 cart_id,
                 item_id):
        """Does a GET request to /accounts/{account_number}/carts/{cart_id}/items/{item_id}.

        Allow clients to get a specific cart item.

        Args:
            account_number (string): TODO: type description here.
            cart_id (int): TODO: type description here.
            item_id (int): TODO: type description here.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/carts/{cart_id}/items/{item_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "cart_id": cart_id,
            "item_id": item_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def get_orders(self,
                   account_number,
                   page=None,
                   limit=None,
                   filter=None):
        """Does a GET request to /accounts/{account_number}/orders.

        Allow clients to get the list of orders.

        Args:
            account_number (string): Account Number
            page (int, optional): Zero based offset index for the results.
                e.g. 0 would start at the first result and 10 would start at
                the eleventh result.
            limit (int, optional): Maximum number of results to return in the
                response.
            filter (string, optional): Allowed fields: from, to, created. Use
                the following delimiters to build your filters params. The
                vertical bar ('|') to separate individual filter phrases and a
                double colon ('::') to separate the names and values. The
                delimiter of the double colon (':') separates the property
                name from the comparison value, enabling the comparison value
                to contain spaces. Example:
                www.example.com\\\/users?filter='name::todd|city::denver|title:
                :grand poobah

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/orders"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })

        # Process optional query parameters
        query_parameters = {
            "page": page,
            "limit": limit,
            "filter": filter
        }
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers, query_parameters=query_parameters)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def get_order(self,
                  account_number,
                  order_id):
        """Does a GET request to /accounts/{account_number}/orders/{order_id}.

        Allow clients to get a specific order.

        Args:
            account_number (string): Account Number
            order_id (int): Order Id

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/orders/{order_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "order_id": order_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def update_trunk(self,
                     account_number,
                     trunk_id,
                     trunk_form):
        """Does a PATCH request to /accounts/{account_number}/trunks/{trunk_id}.

        Update a trunk

        Args:
            account_number (string): TODO: type description here.
            trunk_id (int): TODO: type description here.
            trunk_form (TrunkForm): TODO: type description here.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/trunks/{trunk_id}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "trunk_id": trunk_id
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "content-type": "application/json; charset=utf-8",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.patch(query_url, headers=headers, parameters=APIHelper.json_serialize(trunk_form))

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def get_access_tokens(self,
                          account_number,
                          page=None,
                          limit=None):
        """Does a GET request to /accounts/{account_number}/access-tokens.

        Allow clients to get the list of tokens for the specific account.

        Args:
            account_number (string): Account Number
            page (int, optional): Zero based offset index for the results.
                e.g. 0 would start at the first result and 10 would start at
                the eleventh result.
            limit (int, optional): Maximum number of results to return in the
                response.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/access-tokens"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })

        # Process optional query parameters
        query_parameters = {
            "page": page,
            "limit": limit
        }
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers, query_parameters=query_parameters)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def delete_access_token(self,
                            account_number,
                            token):
        """Does a DELETE request to /accounts/{account_number}/access-tokens/{token}.

        Delete an access token

        Args:
            account_number (string): Account Number
            token (string): Token

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/access-tokens/{token}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "token": token
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.delete(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def get_access_token(self,
                         account_number,
                         token):
        """Does a GET request to /accounts/{account_number}/access-tokens/{token}.

        Allow clients to get a specific token.

        Args:
            account_number (string): Account Number
            token (string): Token

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/access-tokens/{token}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "token": token
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body



    def update_access_token(self,
                            account_number,
                            token,
                            token_form):
        """Does a PATCH request to /accounts/{account_number}/access-tokens/{token}.

        Update an account by a given account_number

        Args:
            account_number (string): Account Number
            token (string): Token
            token_form (TokenForm): TODO: type description here.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/access-tokens/{token}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number,
            "token": token
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "content-type": "application/json; charset=utf-8",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.patch(query_url, headers=headers, parameters=APIHelper.json_serialize(token_form))

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return str(response.raw_body)



    def create_access_tokens(self,
                             account_number,
                             access_token_form):
        """Does a POST request to /accounts/{account_number}/access-tokens.

        Create a new Access Token.

        Args:
            account_number (string): Account Number
            access_token_form (TokenForm): TODO: type description here.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/accounts/{account_number}/access-tokens"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "account_number": account_number
        })
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "content-type": "application/json; charset=utf-8",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.post(query_url, headers=headers, parameters=APIHelper.json_serialize(access_token_form))

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)
        elif response.status_code == 404:
            raise APIException("Resource not found", 404, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body


