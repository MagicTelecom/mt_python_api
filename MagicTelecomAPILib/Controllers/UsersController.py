# -*- coding: utf-8 -*-

"""
   MagicTelecomAPILib.Controllers.UsersController

   This file was automatically generated by APIMATIC BETA v2.0 on 06/22/2016
"""
from MagicTelecomAPILib.APIHelper import APIHelper
from MagicTelecomAPILib.APIException import APIException
from MagicTelecomAPILib.Configuration import Configuration
from MagicTelecomAPILib.Http.HttpRequest import HttpRequest
from MagicTelecomAPILib.Http.HttpResponse import HttpResponse
from MagicTelecomAPILib.Http.RequestsClient import RequestsClient
from MagicTelecomAPILib.Controllers.BaseController import BaseController



class UsersController(BaseController):

    """A Controller to access Endpoints in the MagicTelecomAPILib API."""

    def __init__(self, http_client = None):
        """Constructor which allows a different HTTP client for this controller."""
        BaseController.__init__(self, http_client)

    def get_authentications(self):
        """Does a GET request to /authentications.

        Allow clients to test authentication.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/authentications"
        
        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {
            "user-agent": "APIMATIC 2.0",
            "accept": "application/json",
            "X-Auth-Token": Configuration.x_auth_token,
            "X-Auth-Token": Configuration.x_auth_token
        }

        # Prepare the API call.
        http_request = self.http_client.get(query_url, headers=headers)

        # Invoke the API call  to fetch the response.
        response = self.http_client.execute_as_string(http_request);

        # Endpoint error handling using HTTP status codes.
        if response.status_code == 401:
            raise APIException("You are not authenticated", 401, response.raw_body)
        elif response.status_code == 403:
            raise APIException("This action needs a valid WSSE header", 403, response.raw_body)

        # Global error handling using HTTP status codes.
        self.validate_response(response)    

        return response.raw_body


